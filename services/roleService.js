const { EmbedBuilder } = require('discord.js');
const { ROLE_CONFIG } = require('../config/roleConfig');

class RoleService {
  constructor(client) {
    this.client = client;
  }

  // Fonction pour cr√©er/r√©cup√©rer le r√¥le
  async ensureProjectRole(guild) {
    try {
      // Chercher le r√¥le existant
      let role = guild.roles.cache.find(r => r.name === ROLE_CONFIG.PROJECT_ROLE_NAME);
      
      // Cr√©er le r√¥le s'il n'existe pas
      if (!role) {
        role = await guild.roles.create({
          name: ROLE_CONFIG.PROJECT_ROLE_NAME,
          color: '#3498db', // Bleu
          reason: 'R√¥le automatique pour les notifications de projets SkillCraft',
          mentionable: true, // Permet de mentionner le r√¥le
          permissions: [] // Aucune permission sp√©ciale
        });
        console.log(`‚úÖ R√¥le "${ROLE_CONFIG.PROJECT_ROLE_NAME}" cr√©√© avec succ√®s`);
      }
      
      return role;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du r√¥le:', error);
      return null;
    }
  }

  // Fonction pour cr√©er le message de setup des r√¥les
  async setupRoleMessage() {
    try {
      const channelId = ROLE_CONFIG.SETUP_CHANNEL_ID || ROLE_CONFIG.PROJECT_ANNOUNCE_CHANNEL_ID;
      if (!channelId) {
        console.error('‚ùå Aucun canal configur√© pour le setup des r√¥les');
        return false;
      }

      const channel = await this.client.channels.fetch(channelId);
      if (!channel) {
        console.error('‚ùå Canal non trouv√© pour le setup des r√¥les');
        return false;
      }

      // Cr√©er l'embed pour le message de r√¥le
      const embed = new EmbedBuilder()
        .setTitle('üîî Notifications de Projets SkillCraft')
        .setDescription(`Restez inform√© des nouveaux projets cr√©√©s sur SkillCraft !
        
**Comment √ßa marche ?**
‚Ä¢ Cliquez sur ${ROLE_CONFIG.REACTION_EMOJI} ci-dessous pour recevoir le r√¥le **${ROLE_CONFIG.PROJECT_ROLE_NAME}**
‚Ä¢ Vous serez mentionn√© √† chaque nouveau projet publi√©
‚Ä¢ Recliquez sur ${ROLE_CONFIG.REACTION_EMOJI} pour retirer le r√¥le √† tout moment

**Avantages :**
üöÄ Soyez le premier inform√© des nouveaux projets
üéØ Trouvez rapidement des projets qui vous int√©ressent  
üë• Rejoignez des √©quipes talentueuses
üí° D√©couvrez de nouvelles technologies

**Projet SkillCraft :**
Plateforme collaborative pour d√©veloppeurs o√π vous pouvez cr√©er, rejoindre et d√©velopper des projets ensemble !`)
        .setColor('#3498db')
        .setFooter({ 
          text: 'Crafty ‚Ä¢ Syst√®me de notifications automatique',
          iconURL: this.client.user.displayAvatarURL()
        })
        .setTimestamp();

      // Envoyer le message
      const message = await channel.send({ 
        embeds: [embed],
        content: `**üéØ Syst√®me de notifications des projets**\n\nCliquez sur ${ROLE_CONFIG.REACTION_EMOJI} ci-dessous pour recevoir les notifications !`
      });

      // Ajouter la r√©action
      await message.react(ROLE_CONFIG.REACTION_EMOJI);
      
      console.log(`‚úÖ Message de r√¥le cr√©√© dans #${channel.name}`);
      return true;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du setup du message de r√¥le:', error);
      return false;
    }
  }

  // Fonction pour obtenir la mention du r√¥le
  async getRoleMention(guild) {
    try {
      const role = guild.roles.cache.find(r => r.name === ROLE_CONFIG.PROJECT_ROLE_NAME);
      return role ? `<@&${role.id}>` : '';
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration r√¥le pour mention:', error);
      return '';
    }
  }

  // Ajouter un r√¥le √† un utilisateur
  async addRoleToUser(member, role) {
    try {
      if (member.roles.cache.has(role.id)) {
        console.log(`‚ÑπÔ∏è ${member.user.username} a d√©j√† le r√¥le ${ROLE_CONFIG.PROJECT_ROLE_NAME}`);
        return false;
      }

      await member.roles.add(role);
      console.log(`‚úÖ R√¥le "${ROLE_CONFIG.PROJECT_ROLE_NAME}" ajout√© √† ${member.user.username}`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'ajout du r√¥le:', error);
      return false;
    }
  }

  // Retirer un r√¥le d'un utilisateur
  async removeRoleFromUser(member, role) {
    try {
      if (!member.roles.cache.has(role.id)) {
        console.log(`‚ÑπÔ∏è ${member.user.username} n'a pas le r√¥le ${ROLE_CONFIG.PROJECT_ROLE_NAME}`);
        return false;
      }

      await member.roles.remove(role);
      console.log(`‚ûñ R√¥le "${ROLE_CONFIG.PROJECT_ROLE_NAME}" retir√© de ${member.user.username}`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors du retrait du r√¥le:', error);
      return false;
    }
  }
}

// Export des fonctions standalone pour compatibilit√©
async function setupRoleMessage() {
  // Cette fonction sera appel√©e depuis l'ext√©rieur, on utilise une instance temporaire
  console.error('‚ö†Ô∏è setupRoleMessage appel√©e sans instance de RoleService. Utilisez roleService.setupRoleMessage() √† la place.');
  return false;
}

module.exports = RoleService;
module.exports.setupRoleMessage = setupRoleMessage;