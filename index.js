const express = require('express');
const bodyParser = require('body-parser');
const { Client } = require('discord.js');
const path = require('path');
require('dotenv').config();

// Configuration imports
const { BOT_CONFIG } = require('./config/botConfig');
const { ROLE_CONFIG } = require('./config/roleConfig');

// Service imports
const RoleService = require('./services/roleService');
const ProjectService = require('./services/projectService');

// Utility imports
const CommandHandler = require('./utils/commandHandler');
const ReactionHandler = require('./events/reactionHandler');

// Route imports
const createProjectRoutes = require('./routes/projectRoutes');
const createStatusRoutes = require('./routes/statusRoutes');

// === Configuration Express ===
const app = express();
app.use(bodyParser.json());

// === Configuration Discord ===
const client = new Client({
  intents: BOT_CONFIG.intents
});

// === Initialisation des services ===
let roleService;
let projectService;
let commandHandler;
let reactionHandler;

// === Bot Discord - √âv√©nements ===
client.once('ready', async () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);
  console.log(`üîî Syst√®me de r√¥les configur√© avec l'emoji ${ROLE_CONFIG.REACTION_EMOJI}`);
  console.log(`üéØ R√¥le configur√© : ${ROLE_CONFIG.PROJECT_ROLE_NAME}`);
  
  // Initialiser les services
  roleService = new RoleService(client);
  projectService = new ProjectService(client, roleService);
  
  // Initialiser le gestionnaire de commandes
  commandHandler = new CommandHandler();
  await commandHandler.loadCommands(path.join(__dirname, 'commands'));
  
  // Initialiser le gestionnaire de r√©actions
  reactionHandler = new ReactionHandler(client, roleService);
  
  // Configuration automatique des r√¥les si activ√©e
  if (BOT_CONFIG.AUTO_SETUP_ROLES) {
    console.log('üöÄ Configuration automatique des r√¥les...');
    await roleService.setupRoleMessage();
  }
  
  // Configurer les routes une fois que tout est pr√™t
  if (!routesConfigured) {
    app.use('/', createProjectRoutes(projectService));
    app.use('/', createStatusRoutes(client));
    routesConfigured = true;
    console.log('‚úÖ Routes API configur√©es');
  }
});

// === Gestion des commandes slash ===
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isChatInputCommand()) return;
  
  if (commandHandler) {
    await commandHandler.executeCommand(interaction);
  }
});

// Configuration des routes (apr√®s que les services soient initialis√©s)
let routesConfigured = false;

// Gestion des erreurs Discord
client.on('error', (error) => {
  console.error('‚ùå Erreur Discord:', error);
});

// Gestion des erreurs de processus
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// === D√©marrage du bot et du serveur ===
client.login(BOT_CONFIG.BOT_TOKEN)
  .then(() => {
    app.listen(BOT_CONFIG.EXPRESS_PORT,'0.0.0.0', () => {
      console.log(`üåê Serveur API en √©coute sur le port ${BOT_CONFIG.EXPRESS_PORT}`);
      console.log('ü§ñ Bot Discord pr√™t pour les notifications de projets !');
      console.log(`üîî Syst√®me de r√¥les configur√© avec l'emoji ${ROLE_CONFIG.REACTION_EMOJI}`);
      console.log('');
      console.log('üìã Commandes disponibles :');
      console.log('   ‚Ä¢ /infos - Statistiques du site');
      console.log('   ‚Ä¢ /setup-roles - Cr√©er le syst√®me de r√¥les');
      console.log('   ‚Ä¢ /role-stats - Statistiques des r√¥les');
      console.log('');
      console.log('üöÄ Bot pr√™t √† recevoir les notifications !');
    });
  })
  .catch((error) => {
    console.error('‚ùå Erreur de connexion Discord:', error);
    process.exit(1);
  });